[{"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/index.js":"1","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/App.js":"2","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/PollingLink.js":"3","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/LandingPage.js":"4","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Footer.js":"5","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Navbar.js":"6","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/VotingResults.js":"7","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/Voting.js":"8","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/About.js":"9","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/CreatePoll.js":"10","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/reducer/poll.js":"11","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Table.js":"12","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Option.js":"13","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/lib/Styling.js":"14","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Summary.js":"15","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/reducer/voting.js":"16","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/VotingDummy.js":"17"},{"size":432,"mtime":1610965996661,"results":"18","hashOfConfig":"19"},{"size":1537,"mtime":1612169373722,"results":"20","hashOfConfig":"19"},{"size":1181,"mtime":1612169734072,"results":"21","hashOfConfig":"19"},{"size":992,"mtime":1612260193668,"results":"22","hashOfConfig":"19"},{"size":245,"mtime":1612169373723,"results":"23","hashOfConfig":"19"},{"size":889,"mtime":1612261585713,"results":"24","hashOfConfig":"19"},{"size":889,"mtime":1612253792268,"results":"25","hashOfConfig":"19"},{"size":2758,"mtime":1612184255231,"results":"26","hashOfConfig":"19"},{"size":1650,"mtime":1611909641735,"results":"27","hashOfConfig":"19"},{"size":4493,"mtime":1612266282960,"results":"28","hashOfConfig":"19"},{"size":1741,"mtime":1611871726492,"results":"29","hashOfConfig":"19"},{"size":333,"mtime":1611072258878,"results":"30","hashOfConfig":"19"},{"size":2097,"mtime":1612265621512,"results":"31","hashOfConfig":"19"},{"size":4961,"mtime":1612266230358,"results":"32","hashOfConfig":"19"},{"size":571,"mtime":1611909641733,"results":"33","hashOfConfig":"19"},{"size":352,"mtime":1611931436247,"results":"34","hashOfConfig":"19"},{"size":2415,"mtime":1612256924671,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"cyudei",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/index.js",[],["77","78"],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/App.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/PollingLink.js",["79","80"],"import React from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { poll } from '../reducer/poll'\n\nimport {\n  LinkInput,\n  HeaderPoll, \n  LinkContainer, \n  NavigationButton,\n  NavigationButtonBack } from '../lib/Styling'\n\nexport const PollingLink= () => {\n  const dispatch = useDispatch()\n  const pollId = useSelector((store) => store.poll.pollId) // change if we solve the nesting problem\n  const url = `http://localhost:3000/voting/${pollId}`\n\n  const resetState = () => {\n    dispatch(poll.actions.setPollTopic({ topic: ''}))\n    dispatch(poll.actions.setPollId(null))\n    dispatch(poll.actions.setPollOptions({ options: [] }))\n  }\n    \n  const copyLink = () => {\n    document.getElementById('linkUrl').select()\n    document.execCommand('copy')\n  }\n\n  return (\n    <LinkContainer>\n      <HeaderPoll>Tadaa your link</HeaderPoll>\n      <LinkInput id='linkUrl' defaultValue={url}></LinkInput>\n      <NavigationButton onClick={() => copyLink()}>Copy Link</NavigationButton>\n      <Link to='/'>\n        <NavigationButtonBack>Back to Start Page</NavigationButtonBack>\n      </Link>\n      </LinkContainer>\n  )\n}","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/LandingPage.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Footer.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Navbar.js",["81"],"import React from 'react'\nimport { NavLink, useParams } from 'react-router-dom'\n\nimport { \n  NavContainer,\n  LogoContainer,\n  NavText,\n  NavbarLinks,\n  LinkButton} from '../lib/Styling'\n\nexport const Navbar = () => {\n  return (\n    <NavContainer>\n      <LogoContainer>\n        <NavLink to='/' style={{ textDecoration: 'none' }}>\n          <LinkButton>\n            <NavText>HOME</NavText>\n          </LinkButton>\n        </NavLink>\n      </LogoContainer>\n      <NavbarLinks>\n        <NavLink to='/about' style={{ textDecoration: 'none' }}>\n          <LinkButton>\n            <NavText>ABOUT</NavText>\n          </LinkButton>\n        </NavLink>\n        <NavLink to='/systemicconsensing' style={{ textDecoration: 'none' }}>\n            <LinkButton>\n              <NavText>SYSTEMIC CONSENSING</NavText>\n            </LinkButton>\n        </NavLink>\n      </NavbarLinks>\n    </NavContainer>\n  )\n}","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/VotingResults.js",["82","83","84"],"import React, { useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Table } from '../components/Table'\n\nimport { VotingDummy } from '../components/VotingDummy'\n\nexport const VotingResults= () => {\n  const { id } = useParams()\n  const FINISHED_POLLS_URL = `http://localhost:9000/finishedpoll/${id}`\n  const POLLDETAILS_URL = `http://localhost:9000/poll/${id}`\n  const [finishedPolls, setFinishedPolls] = useState([])\n  const [pollDetails, setPollDetails] = useState ({})\n\n  useEffect(\n    \n    () => {\n    fetch(FINISHED_POLLS_URL)\n    .then(res => res.json())\n    .then((json) => {\n      setFinishedPolls(json)\n    })\n    fetch(POLLDETAILS_URL)\n    .then(res => res.json())\n    .then((json) => {\n      setPollDetails(json)\n    })\n  }, [FINISHED_POLLS_URL, POLLDETAILS_URL])\n  \n  \n\n  return (\n    <>\n      <VotingDummy />\n      <p>Total</p>\n    </>\n  )\n}","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/Voting.js",["85","86","87","88"],"import React, { useState, useEffect } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport { voting } from '../reducer/voting'\nimport { VotingContainer, VotingForm, NavigationButton, NavigationInput, YourName, InputOptions } from '../lib/Styling'\n\nexport const Voting= () => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const { id } = useParams()\n  const [ pollDetails, setPollDetails ] = useState({})\n  // const [ name, setName ] = useState('')\n  const [ state, setState ] = useState({ voting: [] })\n  const POLLDETAILS_URL = `http://localhost:9000/poll/${id}`\n  const FINISHED_POLL_URL = `http://localhost:9000/finishedpoll`\n  const points = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n  const storePollId = () => {\n    setState({\n      ...state,\n      pollId: id\n    })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    \n    fetch(FINISHED_POLL_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json'},\n      body: JSON.stringify(state)\n    })\n    .then((res) => res.json())\n    .then((json) => {\n      history.push(`/voting/${id}/results`)\n    })\n    console.log(state)\n  }\n\n  const handleSelect = (event) => {\n    setState({\n      ...state,\n      ...state.voting.push({\n        optionId: event.target.name,\n        objectionsPoints: event.target.value\n      })\n    })\n  }\n\n  const handleNameInput = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value\n    })\n  }\n\n  useEffect(() => {\n    fetch(POLLDETAILS_URL)\n    .then(res => res.json())\n    .then((json) => {\n      setPollDetails(json)\n      storePollId()\n    })\n  }, [POLLDETAILS_URL])\n\n  console.log('current poll id', id)\n  console.log(\"polldetails\", pollDetails)\n\n  return (\n    <VotingContainer>\n      <h1>{pollDetails.pollTopic}</h1>\n      <VotingForm onSubmit={handleSubmit}>\n        {pollDetails.pollOptions?.map((item) => (\n          <label>{item.text}\n              <select \n                onChange={handleSelect} \n                name={item._id}\n              >\n                {points.map((point) => (\n                  <option value={point}>{point}</option>\n                ))}\n              </select>\n            </label>\n        ))}\n        <YourName>\n          <p>Your name:</p>\n          <input\n            type='text'\n            name='name'\n            value={state.example}\n            onChange={handleNameInput} \n            placeholder='Enter your name ...'\n            required>\n          </input>\n        </YourName>\n        <NavigationInput type='submit' value='Submit your answer and see results'/>\n      </VotingForm>\n      <NavigationButton>Only see results</NavigationButton>\n    </VotingContainer>\n  )\n}","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/About.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/pages/CreatePoll.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/reducer/poll.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Table.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Option.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/lib/Styling.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/Summary.js",["89"],"import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const Summary = ({allOptions, pollTopic}) => {\n  const points = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n  return (\n    <>\n      <h1>This is how your poll will look like</h1>\n      <p>{pollTopic}</p>\n      <form>\n        {allOptions.map((item) => (\n          <label>{item.text}\n            <select disabled>\n              {points.map((point) => (\n                <option value={point}>{point}</option>\n              ))}\n            </select>\n          </label>\n        ))}\n      </form>\n    </>\n  )\n}","/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/reducer/voting.js",[],"/Users/karanmann/Desktop/Technigo/polling-fullstack/frontend/src/components/VotingDummy.js",["90","91"],"import React from 'react'\n\nexport const VotingDummy = () => {\n    const poll = { \n        _id: '123',\n        pollTopic: 'Example Poll',\n        pollOptions: [{\n            _id: '456',\n            text: 'First option'\n        },\n        {\n            _id: '789',\n            text: 'Second option'\n        },\n        {\n            _id: '523',\n            text: 'Third option'\n        }\n    ]\n    }\n    const finishedPolls = [\n        {\n           name: 'Bob',\n           pollId: '123',\n           voting: \n           [\n               {\n                   optionId: '456',\n                   objectionsPoints: 2,\n               },\n\n               {\n                    optionId: '789',\n                    objectionsPoints: 8,\n            },\n            {\n                    optionId: '523',\n                    objectionsPoints: 7,\n            }\n           ] \n        },\n\n        {\n            name: 'Ann',\n            pollId: '123',\n            voting: \n            [\n                {\n                    optionId: '456',\n                    objectionsPoints: 5,\n                },\n                {\n                    optionId: '789',\n                    objectionsPoints: 5,\n            },\n            {\n                    optionId: '523',\n                    objectionsPoints: 3,\n            }\n            ] \n         },\n\n         {\n            name: 'Kim',\n            pollId: '123',\n            voting: \n            [\n                {\n                    optionId: '456',\n                    objectionsPoints: 8,\n                },\n                {\n                    optionId: '789',\n                    objectionsPoints: 1,\n            },\n            {\n                    optionId: '523',\n                    objectionsPoints: 2,\n            }\n            ] \n         }\n    ]\n\n   /*  const finalData = [\n        finishedPoll.map((item) => item.voting.map((vote) => vote.optionId))\n    ]\n */\n    const result = {}\n    // finishedPolls.forEach(arr => {\n    for (let i = 0; i < finishedPolls.length; i++) {\n      finishedPolls[i].voting.forEach(obj => {\n        const {optionId, objectionsPoints} = obj\n        if (result[optionId]) {\n          result[optionId].push(objectionsPoints)\n       } else {\n          result[optionId] = [objectionsPoints]\n       }\n      })\n    };\n    console.log(result)\n\n    // {\n    //   456: [2,5,8],\n    //   789: [8,5,1],\n    //   523: [7,3,2]\n    // }\n\n    return null\n}",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":25},{"ruleId":"96","severity":1,"message":"100","line":19,"column":9,"nodeType":"98","messageId":"99","endLine":19,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":2,"column":19,"nodeType":"98","messageId":"99","endLine":2,"endColumn":28},{"ruleId":"96","severity":1,"message":"101","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":15},{"ruleId":"96","severity":1,"message":"102","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":23},{"ruleId":"96","severity":1,"message":"103","line":12,"column":10,"nodeType":"98","messageId":"99","endLine":12,"endColumn":21},{"ruleId":"96","severity":1,"message":"104","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":16},{"ruleId":"96","severity":1,"message":"105","line":6,"column":84,"nodeType":"98","messageId":"99","endLine":6,"endColumn":96},{"ruleId":"96","severity":1,"message":"106","line":9,"column":9,"nodeType":"98","messageId":"99","endLine":9,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":65,"column":6,"nodeType":"109","endLine":65,"endColumn":23,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":21},{"ruleId":"96","severity":1,"message":"112","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"96","severity":1,"message":"113","line":4,"column":11,"nodeType":"98","messageId":"99","endLine":4,"endColumn":15},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'resetState' is assigned a value but never used.","'Table' is defined but never used.","'finishedPolls' is assigned a value but never used.","'pollDetails' is assigned a value but never used.","'voting' is defined but never used.","'InputOptions' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storePollId'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'useSelector' is defined but never used.","'React' is defined but never used.","'poll' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [POLLDETAILS_URL, storePollId]",{"range":"119","text":"120"},[1692,1709],"[POLLDETAILS_URL, storePollId]"]